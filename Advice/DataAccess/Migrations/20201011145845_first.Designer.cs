// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(AdviceDbContext))]
    [Migration("20201011145845_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.Accounts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ACCESS_LEVEL")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.Property<int>("DEPT_ID")
                        .HasColumnType("int");

                    b.Property<string>("EMAIL")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PASSWORD")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PHONE")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("USERNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("DEPT_ID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DataAccess.Entities.Conversations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ACCESS_LEVEL")
                        .HasColumnType("int");

                    b.Property<int>("ACCOUNT_ID")
                        .HasColumnType("int");

                    b.Property<int?>("AccountsID")
                        .HasColumnType("int");

                    b.Property<int>("CONVERSATION_TYPE")
                        .HasColumnType("int");

                    b.Property<int>("DEPT_ID")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountsID");

                    b.HasIndex("DepartmentsID");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("DataAccess.Entities.Departments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DEPT_ACCESS")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.Property<int>("DEPT_NAME")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DataAccess.Entities.Messages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ACCOUNT_ID")
                        .HasColumnType("int");

                    b.Property<int>("CONVERSATION_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DATE_MADE")
                        .HasColumnType("datetime2");

                    b.Property<int>("DEPT_ID")
                        .HasColumnType("int");

                    b.Property<string>("FILE_LOCATION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KEYWORDS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MESSAGE")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MESSAGE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("READ_ACCESS")
                        .HasColumnType("int");

                    b.Property<string>("TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UPVOTES")
                        .HasColumnType("int");

                    b.Property<int>("VIEWS")
                        .HasColumnType("int");

                    b.Property<int>("WRITE_ACCESS")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ACCOUNT_ID");

                    b.HasIndex("CONVERSATION_ID");

                    b.HasIndex("DEPT_ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DataAccess.Entities.Accounts", b =>
                {
                    b.HasOne("DataAccess.Entities.Departments", "Departments")
                        .WithMany("Accounts")
                        .HasForeignKey("DEPT_ID")
                        .HasConstraintName("FK_Review_Department")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Conversations", b =>
                {
                    b.HasOne("DataAccess.Entities.Accounts", "Accounts")
                        .WithMany("Conversations")
                        .HasForeignKey("AccountsID");

                    b.HasOne("DataAccess.Entities.Departments", "Departments")
                        .WithMany("Conversations")
                        .HasForeignKey("DepartmentsID");
                });

            modelBuilder.Entity("DataAccess.Entities.Messages", b =>
                {
                    b.HasOne("DataAccess.Entities.Accounts", "Accounts")
                        .WithMany("Messages")
                        .HasForeignKey("ACCOUNT_ID")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Conversations", "Conversations")
                        .WithMany("Messages")
                        .HasForeignKey("CONVERSATION_ID")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Departments", "Departments")
                        .WithMany("Messages")
                        .HasForeignKey("DEPT_ID")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
