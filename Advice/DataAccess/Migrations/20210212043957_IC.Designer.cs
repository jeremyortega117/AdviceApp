// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(AdviceDbContext))]
    [Migration("20210212043957_IC")]
    partial class IC
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.Accounts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ACCESS_LEVEL")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.Property<int?>("DEPT_ID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("EMAIL")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PASSWORD")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PHONE")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("USERNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("DEPT_ID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ACCESS_LEVEL = 17,
                            DEPT_ID = 1,
                            EMAIL = "nickfurgerson@email.com",
                            FNAME = "Nick",
                            LNAME = "Furgerson",
                            PASSWORD = "BLESSEDONE",
                            PHONE = "1(138)789-2123",
                            USERNAME = "soccerboy"
                        },
                        new
                        {
                            ID = 2,
                            ACCESS_LEVEL = 1,
                            DEPT_ID = 2,
                            EMAIL = "jaylance@email.com",
                            FNAME = "Jay",
                            LNAME = "Lance",
                            PASSWORD = "firedup",
                            PHONE = "765-5432",
                            USERNAME = "rayrance"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Conversations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ACCESS_LEVEL")
                        .HasColumnType("int");

                    b.Property<int?>("ACCOUNT_ID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("CONVERSATION_TYPE")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.HasKey("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("ACCOUNT_ID");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ACCESS_LEVEL = 10,
                            ACCOUNT_ID = 1,
                            CONVERSATION_TYPE = 1
                        },
                        new
                        {
                            ID = 2,
                            ACCESS_LEVEL = 5,
                            ACCOUNT_ID = 1,
                            CONVERSATION_TYPE = 2
                        },
                        new
                        {
                            ID = 3,
                            ACCESS_LEVEL = 3,
                            ACCOUNT_ID = 2,
                            CONVERSATION_TYPE = 3
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Departments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DEPT_ACCESS")
                        .HasColumnType("int")
                        .HasMaxLength(100);

                    b.Property<string>("DEPT_NAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DEPT_ACCESS = 9001,
                            DEPT_NAME = "Fun Zone"
                        },
                        new
                        {
                            ID = 2,
                            DEPT_ACCESS = 0,
                            DEPT_NAME = "Stranger Danger"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Messages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ACCOUNT_ID")
                        .HasColumnType("int");

                    b.Property<int>("CONVERSATION_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DATE_MADE")
                        .HasColumnType("datetime2");

                    b.Property<int>("DEPT_ID")
                        .HasColumnType("int");

                    b.Property<string>("FILE_LOCATION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KEYWORDS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MESSAGE")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MESSAGE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("READ_ACCESS")
                        .HasColumnType("int");

                    b.Property<string>("TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UPVOTES")
                        .HasColumnType("int");

                    b.Property<int>("VIEWS")
                        .HasColumnType("int");

                    b.Property<int>("WRITE_ACCESS")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ACCOUNT_ID");

                    b.HasIndex("CONVERSATION_ID");

                    b.HasIndex("DEPT_ID");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ACCOUNT_ID = 1,
                            CONVERSATION_ID = 1,
                            DATE_MADE = new DateTime(2021, 2, 11, 22, 39, 56, 904, DateTimeKind.Local).AddTicks(5937),
                            DEPT_ID = 1,
                            FILE_LOCATION = "C:\\Users\\JPOje\\OneDrive\\Documents\\CODE\\PROJECTS\\Advice App\\Notes",
                            KEYWORDS = "BLESSINGS",
                            MESSAGE = new byte[] { 0, 1, 2 },
                            MESSAGE_TYPE = ".txt",
                            READ_ACCESS = 99,
                            TYPE = "NOTE",
                            UPVOTES = 100,
                            VIEWS = 117,
                            WRITE_ACCESS = 4
                        },
                        new
                        {
                            ID = 2,
                            ACCOUNT_ID = 2,
                            CONVERSATION_ID = 2,
                            DATE_MADE = new DateTime(2021, 2, 11, 22, 39, 56, 907, DateTimeKind.Local).AddTicks(3403),
                            DEPT_ID = 2,
                            FILE_LOCATION = "C:\\Users\\JPOje\\OneDrive\\Documents\\CODE\\PROJECTS\\Advice App\\Notes",
                            KEYWORDS = "funny",
                            MESSAGE = new byte[] { 1, 2, 3 },
                            MESSAGE_TYPE = ".png",
                            READ_ACCESS = 9,
                            TYPE = "QUESTION",
                            UPVOTES = 56,
                            VIEWS = 70,
                            WRITE_ACCESS = 5
                        },
                        new
                        {
                            ID = 3,
                            ACCOUNT_ID = 2,
                            CONVERSATION_ID = 2,
                            DATE_MADE = new DateTime(2021, 2, 11, 22, 39, 56, 907, DateTimeKind.Local).AddTicks(3683),
                            DEPT_ID = 2,
                            FILE_LOCATION = "C:\\Users\\JPOje\\OneDrive\\Documents\\CODE\\PROJECTS\\Advice App\\Notes",
                            KEYWORDS = "funny",
                            MESSAGE = new byte[] { 2, 3, 4 },
                            MESSAGE_TYPE = ".png",
                            READ_ACCESS = 9,
                            TYPE = "ANSWER",
                            UPVOTES = 7,
                            VIEWS = 12,
                            WRITE_ACCESS = 10
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Accounts", b =>
                {
                    b.HasOne("DataAccess.Entities.Departments", "Departments")
                        .WithMany("Accounts")
                        .HasForeignKey("DEPT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Conversations", b =>
                {
                    b.HasOne("DataAccess.Entities.Accounts", "Accounts")
                        .WithMany("Conversations")
                        .HasForeignKey("ACCOUNT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Messages", b =>
                {
                    b.HasOne("DataAccess.Entities.Accounts", "Accounts")
                        .WithMany("Messages")
                        .HasForeignKey("ACCOUNT_ID")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Conversations", "Conversations")
                        .WithMany("Messages")
                        .HasForeignKey("CONVERSATION_ID")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Departments", "Departments")
                        .WithMany("Messages")
                        .HasForeignKey("DEPT_ID")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
