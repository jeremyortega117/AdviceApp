// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Advice.Migrations
{
    [DbContext(typeof(AdviceDbContext))]
    [Migration("20200327231748_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.Accounts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "greg@mail.com",
                            Password = "pass@word",
                            Username = "gregory"
                        },
                        new
                        {
                            ID = 2,
                            Email = "paul@mail.com",
                            Password = "pass@word1",
                            Username = "paul"
                        },
                        new
                        {
                            ID = 3,
                            Email = "samantha@mail.com",
                            Password = "pass@word2",
                            Username = "samantha"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Answers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Account_ID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Answers_")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Question_ID")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasMaxLength(1000);

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.Property<int>("Visited")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Account_ID");

                    b.HasIndex("Question_ID");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Account_ID = 1,
                            Answers_ = "butter the outside of two pieces of bread and place a slice of cheese in the middle and cook on stove for 3 minutes on each side.",
                            Question_ID = 1,
                            Upvotes = 0,
                            Visited = 0
                        },
                        new
                        {
                            ID = 2,
                            Account_ID = 3,
                            Answers_ = "Place PB and Jelly in between two pieces of bread.",
                            Question_ID = 1,
                            Upvotes = 0,
                            Visited = 0
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Questions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Account_ID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.Property<int>("Visited")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Account_ID");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Account_ID = 1,
                            Question = "How to make grilled cheese",
                            QuestionType = "cooking",
                            Upvotes = 0,
                            Visited = 0
                        },
                        new
                        {
                            ID = 2,
                            Account_ID = 1,
                            Question = "How to make PB&J",
                            QuestionType = "cooking",
                            Upvotes = 0,
                            Visited = 0
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Answers", b =>
                {
                    b.HasOne("DataAccess.Entities.Accounts", "Accounts")
                        .WithMany("Answers")
                        .HasForeignKey("Account_ID")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Questions", "Questions")
                        .WithMany("Answers")
                        .HasForeignKey("Question_ID")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Questions", b =>
                {
                    b.HasOne("DataAccess.Entities.Accounts", "Accounts")
                        .WithMany("Questions")
                        .HasForeignKey("Account_ID");
                });
#pragma warning restore 612, 618
        }
    }
}
