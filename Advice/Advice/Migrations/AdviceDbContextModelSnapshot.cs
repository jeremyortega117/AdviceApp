// <auto-generated />
using System;
using System.Security.Cryptography.X509Certificates;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Advice.Migrations
{
    [DbContext(typeof(AdviceDbContext))]
    partial class AdviceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            /* Departments */
            modelBuilder.Entity("DataAccess.Entities.Departments", b =>
            {
                b.Property<int>("ID")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("DEPT_NAME")
                    .IsRequired()
                    .HasColumnType("nvarchar(32)")
                    .HasMaxLength(32);

                b.Property<string>("DEPT_ACCESS")
                    .IsRequired()
                    .HasColumnType("int");

                b.HasKey("ID");

                b.ToTable("Departments");

                //b.HasData(
                //    new
                //    {
                //        ID = 1,
                //        Account_ID = 1,
                //        Answers_ = "butter the outside of two pieces of bread and place a slice of cheese in the middle and cook on stove for 3 minutes on each side.",
                //        Question_ID = 1,
                //        Upvotes = 0,
                //        Visited = 0
                //    },
                //    new
                //    {
                //        ID = 2,
                //        Account_ID = 3,
                //        Answers_ = "Place PB and Jelly in between two pieces of bread.",
                //        Question_ID = 1,
                //        Upvotes = 0,
                //        Visited = 0
                //    });
            });


            /* Accounts */
            modelBuilder.Entity("DataAccess.Entities.Accounts", b =>
            {
                b.Property<int>("ID")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("FNAME")
                    .IsRequired()
                    .HasColumnType("nvarchar(32)")
                    .HasMaxLength(30);

                b.Property<string>("LNAME")
                    .IsRequired()
                    .HasColumnType("nvarchar(32)")
                    .HasMaxLength(30);

                b.Property<string>("PASSWORD")
                    .IsRequired()
                    .HasColumnType("nvarchar(32)")
                    .HasMaxLength(32);

                b.Property<int>("ACCESS_LEVEL")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<string>("EMAIL")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<string>("PHONE")
                    .IsRequired()
                    .HasColumnType("nvarchar(20)")
                    .HasMaxLength(20);

                b.Property<string>("USERNAME")
                    .IsRequired()
                    .HasColumnType("nvarchar(32)")
                    .HasMaxLength(30);

                b.HasKey("ID");

                b.HasIndex("DEPT_ID");

                b.HasOne("DataAccess.Entities.Accounts", "Departments")
                    .WithMany("Accounts")
                    .HasForeignKey("DEPT_ID")
                    .IsRequired();

                b.ToTable("Accounts");
            });



            /* Conversations */
            modelBuilder.Entity("DataAccess.Entities.Conversations", b =>
            {
                b.Property<int>("ID")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ACCOUNT_ID")
                    .IsRequired()
                    .HasColumnType("int")
                    .HasMaxLength(30);

                b.Property<string>("CONVERSATION_TYPE")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<string>("DEPT_ID")
                    .IsRequired()
                    .HasColumnType("int")
                    .HasMaxLength(30);

                b.Property<int>("ACCESS_LEVEL")
                    .IsRequired()
                    .HasColumnType("int");

                b.HasKey("ID");

                b.HasIndex("DEPT_ID");

                b.HasOne("DataAccess.Entities.Conversations", "Departments")
                    .WithMany("Conversations")
                    .HasForeignKey("DEPT_ID")
                    .IsRequired();

                b.HasIndex("ACCOUNT_ID");

                b.HasOne("DataAccess.Entities.Conversations", "Accounts")
                    .WithMany("Conversations")
                    .HasForeignKey("ACCOUNT_ID")
                    .IsRequired();


                b.ToTable("Conversations");
            });



            /* Messages */
            modelBuilder.Entity("DataAccess.Entities.Messages", b =>
            {
                b.Property<int>("ID")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("CONVERSATION_ID")
                    .IsRequired()
                    .HasColumnType("int")
                    .HasMaxLength(30);

                b.Property<string>("DEPT_ID")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<string>("ACCOUNT_ID")
                    .IsRequired()
                    .HasColumnType("int")
                    .HasMaxLength(30);

                b.Property<DateTime>("DATE_MADE")
                    .IsRequired()
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("DATETIME");

                b.Property<byte[]>("MESSAGE")
                    .IsRequired()
                    .HasMaxLength(10000000);

                b.Property<string>("MESSAGE_TYPE")
                    .IsRequired()
                    .HasColumnType("nvarchar(32)");

                b.Property<string>("KEYWORDS")
                    .IsRequired()
                    .HasColumnType("nvarchar(32)");

                b.Property<string>("UPVOTES")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<string>("VIEWS")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<string>("READ_ACCESS")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<string>("WRITE_ACCESS")
                    .IsRequired()
                    .HasColumnType("int");

                b.HasKey("ID");

                b.HasIndex("DEPT_ID");
                b.HasOne("DataAccess.Entities.Conversations", "Departments")
                    .WithMany("Conversations")
                    .HasForeignKey("DEPT_ID")
                    .IsRequired();

                b.HasIndex("ACCOUNT_ID");
                b.HasOne("DataAccess.Entities.Conversations", "Accounts")
                    .WithMany("Conversations")
                    .HasForeignKey("ACCOUNT_ID")
                    .IsRequired();

                b.HasIndex("CONVERSATION_ID");
                b.HasOne("DataAccess.Entities.Conversations", "Conversations")
                    .WithMany("Messages")
                    .HasForeignKey("CONVERSATION_ID")
                    .IsRequired();

                b.ToTable("Conversations");
            });





            //modelBuilder.Entity("DataAccess.Entities.Answers", b =>
            //    {
            //        b.HasOne("DataAccess.Entities.Accounts", "Accounts")
            //            .WithMany("Answers")
            //            .HasForeignKey("Account_ID")
            //            .IsRequired();

            //        b.HasOne("DataAccess.Entities.Questions", "Questions")
            //            .WithMany("Answers")
            //            .HasForeignKey("Question_ID")
            //            .IsRequired();
            //    });

            //modelBuilder.Entity("DataAccess.Entities.Questions", b =>
            //    {
            //        b.HasOne("DataAccess.Entities.Accounts", "Accounts")
            //            .WithMany("Questions")
            //            .HasForeignKey("Account_ID");
            //    });
        }
    }
}