<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Advice</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:Advice.Controllers.AccountsController" -->
        <member name="M:Advice.Controllers.AccountsController.#ctor(AdviceLib.IRepository.IRepositoryAccounts{AdviceLib.Models.Accounts1})">
            <summary>
            contstructor for Accounts Controller
            </summary>
            <param name="Acc"></param>
        </member>
        <member name="M:Advice.Controllers.AccountsController.Get">
            <summary>
            return all elements in Account
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advice.Controllers.AccountsController.Get(System.Int32)">
            <summary>
            Get account by id
            /// </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Advice.Controllers.AccountsController.Post(System.String,System.String,System.String)">
            <summary>
            Create Account
            </summary>
            <param name="email"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Advice.Controllers.AccountsController.Put(System.Int32,System.String,System.String)">
            <summary>
            Update and account email and username
            </summary>
            <param name="id"></param>
            <param name="email"></param>
            <param name="username"></param>
        </member>
        <member name="M:Advice.Controllers.AccountsController.Delete(System.Int32)">
            <summary>
            Delete account by id
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Advice.Controllers.AnswersController">
            <summary>
            Answers controller Class   /// </summary>
        </member>
        <member name="M:Advice.Controllers.AnswersController.#ctor(AdviceLib.IRepository.IRepositoryAnswers{AdviceLib.Models.Answers1})">
            <summary>
            contstructor for Accounts Controller
            </summary>
            <param name="Acc"></param>
        </member>
        <member name="M:Advice.Controllers.AnswersController.Get">
            <summary>
            get all answers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Advice.Controllers.AnswersController.Get(System.Int32)">
            <summary>
            get answers by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Advice.Controllers.AnswersController.Post(System.String,System.Int32)">
            <summary>
            Create answers based on id.
            </summary>
            <param name="answer"></param>
            <param name="id"></param>
        </member>
        <member name="M:Advice.Controllers.AnswersController.Put(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="upvotes"></param>
            <param name="visited"></param>
        </member>
        <member name="M:Advice.Controllers.AnswersController.Delete(System.Int32)">
            <summary>
            delete answer by id
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Advice.Controllers.QuestionsController">
            <summary>
            Question Controller Class  /// </summary>
        </member>
        <member name="M:Advice.Controllers.QuestionsController.#ctor(AdviceLib.IRepository.IRepositoryQuestions{AdviceLib.Models.Questions1})">
            <summary>
            contstructor for Accounts Controller
            </summary>
            <param name="Acc"></param>
        </member>
        <member name="M:Advice.Controllers.QuestionsController.Get">
            <summary>
            return all questions        /// </summary>
            <returns></returns>
        </member>
        <member name="M:Advice.Controllers.QuestionsController.Get(System.Int32)">
            <summary>
            return question by id        /// </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Advice.Controllers.QuestionsController.Post(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="Questions"></param>
            <param name="id"></param>
        </member>
        <member name="M:Advice.Controllers.QuestionsController.Put(System.Int32,System.Int32,System.Int32)">
            <summary>
            update upvotes and visited status
            </summary>
            <param name="id"></param>
            <param name="upvotes"></param>s
            <param name="visited"></param>
        </member>
        <member name="M:Advice.Controllers.QuestionsController.Delete(System.Int32)">
            <summary>
            delete answer by id
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Advice.Controllers.WeatherForecastController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Advice.Controllers.WeatherForecastController.#ctor(Microsoft.Extensions.Logging.ILogger{Advice.Controllers.WeatherForecastController})">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Advice.Controllers.WeatherForecastController.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Advice.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:Advice.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Advice.Program.CreateHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Advice.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Advice.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:Advice.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Advice.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Advice.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:Advice.WeatherForecast">
            <summary>
            
            </summary>
        </member>
        <member name="P:Advice.WeatherForecast.Date">
            <summary>
            
            </summary>
        </member>
        <member name="P:Advice.WeatherForecast.TemperatureC">
            <summary>
            
            </summary>
        </member>
        <member name="P:Advice.WeatherForecast.TemperatureF">
            <summary>
            
            </summary>
        </member>
        <member name="P:Advice.WeatherForecast.Summary">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
